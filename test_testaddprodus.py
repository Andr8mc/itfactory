# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestTestaddprodus():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_testaddprodus(self):
    # Test name: testaddprodus
    # Step # | name | target | value
    # 1 | open | http://34.118.122.203/administration/index.php?controller=AdminLogin&logout=1&token=958fb60fa7caa6709f45c58954e32439 | 
    self.driver.get("http://34.118.122.203/administration/index.php?controller=AdminLogin&logout=1&token=958fb60fa7caa6709f45c58954e32439")
    # 2 | setWindowSize | 1920x1040 | 
    self.driver.set_window_size(1920, 1040)
    # 3 | click | id=email | 
    self.driver.find_element(By.ID, "email").click()
    # 4 | type | id=email | maricaandrei60@gmail.com
    self.driver.find_element(By.ID, "email").send_keys("maricaandrei60@gmail.com")
    # 5 | type | id=passwd | 123456789
    self.driver.find_element(By.ID, "passwd").send_keys("123456789")
    # 6 | click | id=submit_login | 
    self.driver.find_element(By.ID, "submit_login").click()
    # 7 | mouseOver | id=submit_login | 
    element = self.driver.find_element(By.ID, "submit_login")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 8 | click | css=#subtab-AdminCatalog > .link |
    self.driver.implicitly_wait(3)
    self.driver.find_element(By.CSS_SELECTOR, "#subtab-AdminCatalog > .link").click()
    # 9 | click | linkText=Products | 
    self.driver.find_element(By.LINK_TEXT, "Products").click()
    # 10 | click | id=page-header-desc-configuration-add | 
    self.driver.find_element(By.ID, "page-header-desc-configuration-add").click()
    # 11 | click | id=form_step1_name_1 | 
    self.driver.find_element(By.ID, "form_step1_name_1").click()
    # 12 | runScript | window.scrollTo(0,200) | 
    self.driver.execute_script("window.scrollTo(0,200)")
    # 13 | type | id=form_step1_name_1 | produs test
    self.driver.find_element(By.ID, "form_step1_name_1").send_keys("produs test")
    # 14 | click | css=#mceu_62 > div | 
    self.driver.find_element(By.CSS_SELECTOR, "#mceu_62 > div").click()
    # 15 | mouseOver | css=#mceu_49-button > .material-icons | 
    element = self.driver.find_element(By.CSS_SELECTOR, "#mceu_49-button > .material-icons")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 16 | mouseOut | css=#mceu_49-button > .material-icons | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element_with_offset(element, 0, 0).perform()
    # 17 | selectFrame | index=2 | 
    self.driver.switch_to.frame(2)
    # 18 | editContent | id=tinymce | <p>test1</p>
    element = self.driver.find_element(By.ID, "tinymce")
    self.driver.execute_script("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '<p>test1</p>'}", element)
    # 19 | selectFrame | relative=parent | 
    self.driver.switch_to.default_content()
    # 20 | click | css=#mceu_20 > div | 
    self.driver.find_element(By.CSS_SELECTOR, "#mceu_20 > div").click()
    # 21 | runScript | window.scrollTo(0,339) | 
    self.driver.execute_script("window.scrollTo(0,339)")
    # 22 | selectFrame | index=0 | 
    self.driver.switch_to.frame(0)
    # 23 | editContent | id=tinymce | <p>test1</p>
    element = self.driver.find_element(By.ID, "tinymce")
    self.driver.execute_script("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '<p>test1</p>'}", element)
    # 24 | selectFrame | relative=parent | 
    self.driver.switch_to.default_content()
    # 25 | click | id=form_step1_qty_0_shortcut | 
    self.driver.find_element(By.ID, "form_step1_qty_0_shortcut").click()
    # 26 | type | id=form_step1_qty_0_shortcut | 10
    self.driver.find_element(By.ID, "form_step1_qty_0_shortcut").send_keys("10")
    # 27 | click | id=form_step1_price_shortcut | 
    self.driver.find_element(By.ID, "form_step1_price_shortcut").click()
    # 28 | type | id=form_step1_price_shortcut | 10
    self.driver.find_element(By.ID, "form_step1_price_shortcut").send_keys("10")
    # 29 | click | css=.switch-input | 
    self.driver.find_element(By.CSS_SELECTOR, ".switch-input").click()
    # 30 | mouseOver | id=submit | 
    element = self.driver.find_element(By.ID, "submit")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 31 | click | id=submit | 
    self.driver.find_element(By.ID, "submit").click()
    # 32 | mouseOut | id=submit | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element_with_offset(element, 0, 0).perform()
    # 33 | click | linkText=Products | 
    self.driver.find_element(By.LINK_TEXT, "Products").click()
    assert 'produs test' in self.driver.page_source

  
